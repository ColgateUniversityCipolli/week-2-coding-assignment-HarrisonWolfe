# Write code for answer here.
#Reiterating the bounds and questions
a = 0 #Lower Bound
b = 2 #Upper Bound
integrand = function(x){ #Making the Function
f <- 7 - 2 * x^2
return(f)
}
#Number of trapezoids
numb.of.trap = 100
#Setting up the width
width.of.trap = b-a(numb.of.trap)
# Write code for answer here.
#Reiterating the bounds and questions
a = 0 #Lower Bound
b = 2 #Upper Bound
integrand = function(x){ #Making the Function
f <- 7 - 2 * x^2
return(f)
}
#Number of trapezoids
numb.of.trap = 100
#Setting up the width
width.of.trap = b-a*(numb.of.trap)
#Points for trapezoid
point.for.trap = a + 0:99*(width.of.trap)
#Formula for the trapezoid
0.5*width.of.trap*sum(integrand(a)+integrand(b) +sum(2*integrand(a+width.of.trap)))
# Write code for answer here.
#Reiterating the bounds and questions
a = 0 #Lower Bound
b = 2 #Upper Bound
integrand = function(x){ #Making the Function
f <- 7 - 2 * x^2
return(f)
}
#Number of trapezoids
numb.of.trap = 100
#Setting up the width
width.of.trap = b-a*(numb.of.trap)
#Points for trapezoid
point.for.trap = a + 1:100*(width.of.trap)
#Formula for the trapezoid
0.5*width.of.trap*sum(integrand(a)+integrand(b) +sum(2*integrand(a+width.of.trap)))
a = 0 #Lower Bound
b = 2 #Upper Bound
integrand = function(x){ #Making the Function
f <- 7 - 2 * x^2
return(f)
}
#Number of trapezoids
numb.of.trap = 100
#Setting up the width
width.of.trap = b-a*(numb.of.trap)
#Points for trapezoid
point.for.trap = a + 1:100*(width.of.trap)
#Formula for the trapezoid
0.5*width.of.trap*sum(integrand(a)+integrand(b) +sum(2*integrand(a+point.for.trap)))
a = 0 #Lower Bound
b = 2 #Upper Bound
integrand = function(x){ #Making the Function
f <- 7 - 2 * x^2
return(f)
}
#Number of trapezoids
numb.of.trap = 100
#Setting up the width
width.of.trap = b-a/(numb.of.trap)
#Points for trapezoid
point.for.trap = a + 1:100*(width.of.trap)
#Formula for the trapezoid
0.5*width.of.trap*sum(integrand(a)+integrand(b) +sum(2*integrand(a+point.for.trap)))
point.for.trap
width.of.trap
a = 0 #Lower Bound
b = 2 #Upper Bound
integrand = function(x){ #Making the Function
f <- 7 - 2 * x^2
return(f)
}
#Number of trapezoids
numb.of.trap = 100
#Setting up the width
width.of.trap = b-a/(numb.of.trap)
width.of.trap
width.of.trap = b-a/numb.of.trap
width.of.trap
a = 0 #Lower Bound
b = 2 #Upper Bound
integrand = function(x){ #Making the Function
f <- 7 - 2 * x^2
return(f)
}
#Number of trapezoids
numb.of.trap = 100
#Setting up the width
width.of.trap = (b-a)/numb.of.trap
#Points for trapezoid
point.for.trap = a + 1:100*(width.of.trap)
#Formula for the trapezoid
0.5*width.of.trap*sum(integrand(a)+integrand(b) +sum(2*integrand(a+point.for.trap)))
\documentclass{article}
if(!is.numeric(a)){ # if a is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!is.numeric(b)){ # if b is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!(is.numeric(n.rect)) | (n.rect%%1!=0)){ # if n.rect is not a whole number
stop("The number of rectangles must be a positive whole number.")
}
a <- 0
b <- 2
n.rect <- 100
(delta.x <- (b-a)/n.rect)
if(!is.numeric(a)){ # if a is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!is.numeric(b)){ # if b is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!(is.numeric(n.rect)) | (n.rect%%1!=0)){ # if n.rect is not a whole number
stop("The number of rectangles must be a positive whole number.")
}
######################################
# Compute Area
######################################
if(method == "Left"){
# Add necessary code here
left.points <- a + 0:99*(delta.x)
(left.area <- sum(delta.x*(integrand(left.points))))
}else if(method == "Right"){
# Add necessary code here
right.points <- a + 1:100*(delta.x)
(right.area <- sum(delta.x*(integrand(right.points))))
}else if(method == "Midpoint"){
# Add necessary code here
mid.points <- (left.points+right.points)/2
(mid.area <- sum(delta.x*(integrand(mid.points))))
}else if(method == "Trapezoidial"){
# Add necessary code here
numb.of.trap = 100
width.of.trap = (b-a)/numb.of.trap
point.for.trap = a + 1:100*(width.of.trap)
0.5*width.of.trap*sum(integrand(a) + integrand(b) + sum(2*integrand(a+point.for.trap)))
}else{
stop("Please select a valid method (e.g., 'Left', 'Right', 'Midpoint', 'Trapezoidial')")
}
riemann.sums <- function(fnct,                        # function to integrate
a,                           # lower bound of integral
b,                           # upper bound of integral
n.rect,                      # number of  bound of integral
method = "Trapezoidial")
riemann.sums <- function(fnct,                        # function to integrate
a,                           # lower bound of integral
b,                           # upper bound of integral
n.rect,                      # number of  bound of integral
method = "Trapezoidial"){    # method to use (trap by default)
######################################
# Check Input
######################################
if(!is.numeric(a)){ # if a is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!is.numeric(b)){ # if b is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!(is.numeric(n.rect)) | (n.rect%%1!=0)){ # if n.rect is not a whole number
stop("The number of rectangles must be a positive whole number.")
}
######################################
# Compute Area
######################################
if(method == "Left"){
# Add necessary code here
left.points <- a + 0:99*(delta.x)
(left.area <- sum(delta.x*(integrand(left.points))))
}else if(method == "Right"){
# Add necessary code here
right.points <- a + 1:100*(delta.x)
(right.area <- sum(delta.x*(integrand(right.points))))
}else if(method == "Midpoint"){
# Add necessary code here
mid.points <- (left.points+right.points)/2
(mid.area <- sum(delta.x*(integrand(mid.points))))
}else if(method == "Trapezoidial"){
# Add necessary code here
numb.of.trap = 100
width.of.trap = (b-a)/numb.of.trap
point.for.trap = a + 1:100*(width.of.trap)
0.5*width.of.trap*sum(integrand(a) + integrand(b) + sum(2*integrand(a+point.for.trap)))
}else{
stop("Please select a valid method (e.g., 'Left', 'Right', 'Midpoint', 'Trapezoidial')")
}
######################################
# Return the area
######################################
return(area)
}
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100)
Left
View(riemann.sums)
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100)
